<project name="ssensecontext2globalcontext-runner" default="run-ssenses2globalcontext" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:git="antlib:com.rimerosolutions.ant.git">

    <property name="ivy.jar.dir" value="${basedir}/ivy"/>
    <property name="ivy.install.version" value="2.4.0"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="ivy.conf.dir" value="${ivy.jar.dir}/conf" />
    <property name="downloads.dir" value="${basedir}/downloads" />
    <property name="maven3.install.version" value="3.6.2" />
    <property name="maven3.zip.file" value="${downloads.dir}/maven3.zip" />
    <property name="tools.home" value="${basedir}/tools" />
    
    <condition property="isWindows">
            <os family="windows" />
    </condition>

    <condition property="isUnix">
            <os family="unix" />
    </condition>

    <condition property="skip.clone.repos">
        <and>
            <available file="${basedir}/nlp/.git" type="dir" />
            <available file="${basedir}/cmrdca/.git" type="dir" />
        </and>
    </condition>
    
    <condition property="skip.nlp.package">
            <available file="${basedir}/nlp/srmq-nlp/target/srmq-nlp-0.0.1-SNAPSHOT-jar-with-dependencies.jar" type="file" />
    </condition>

    <target name="shell_windows_setup" if="isWindows">
            <property name="shell.executable" value="cmd" />
            <property name="shell.args" value="/c" />
    </target>

    <target name="shell_unix_setup" if="isUnix">
            <property name="shell.executable" value="sh" />
            <property name="shell.args" value="-c" />
    </target>

    <target name="download-ivy" unless="skip.download.ivy">
            <mkdir dir="${ivy.jar.dir}"/>
            <!-- download Ivy from web site so that it can be used even without any special installation -->
            <echo message="installing ivy..."/>
            <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" description="--> install ivy" >
            <!-- try to load Ivy here from local Ivy dir, in case the user has not already dropped
            it into Ant's lib dir (note that the latter copy will always take precedence).
            We will not fail as long as local lib dir exists (it may be empty) and
            Ivy is in at least one of Ant's lib dir or the local lib dir. -->
            <path id="ivy.lib.path">
                    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
            </path>
            <taskdef resource="org/apache/ivy/ant/antlib.xml"
                uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    
        <target name="gen-ivy-settings" depends="install-ivy">
                <mkdir dir="${ivy.conf.dir}" />
                <echoxml file="${ivy.conf.dir}/ivy-public-resolvers.xml">
                        <ivysettings>
                                <resolvers>
                                        <chain name="default-chain">
                                                <ibiblio name="srmq-maven-repo" m2compatible="true" usepoms="true" pattern="[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]" root="https://srmq-maven-repo.appspot.com" />
                                                <ibiblio name="public" m2compatible="true"/>
                                                <url name="sonatype-snapshots" m2compatible="true">
                                                        <artifact pattern="https://oss.sonatype.org/content/repositories/snapshots/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"/>
                                                </url>
                                        </chain>
                                </resolvers>
                        </ivysettings>
                </echoxml>
                <echoxml file="${ivy.conf.dir}/ivysettings.xml">
                        <ivysettings>
                                <settings defaultResolver="default-chain"/>
                                <include file="${ivy.conf.dir}/ivy-public-resolvers.xml"/>
                                <include url="${ivy.default.settings.dir}/ivysettings-shared.xml"/>
                                <include url="${ivy.default.settings.dir}/ivysettings-local.xml"/>
                                <include url="${ivy.default.settings.dir}/ivysettings-main-chain.xml"/>
                                <include url="${ivy.default.settings.dir}/ivysettings-default-chain.xml"/>
                        </ivysettings>
                </echoxml>
                <echoxml file="${ivy.conf.dir}/ivy-git-tasks.xml">
                        <ivy-module version="2.0">
                                <info organisation="srmq.org" module="ivy-git-tasks"/>

                                <configurations defaultconfmapping="default->default">
                                        <conf name="default" />
                                        <conf name="provided" description="they are provided by the env." />
                                        <conf name="compile" extends="default,provided" />
                                        <conf name="git-task" extends="default"/>
                                </configurations>

                                <dependencies>
                                        <dependency org="org.eclipse.jgit" 
                                name="org.eclipse.jgit.ant" 
                                rev="3.0.0.201306101825-r"  conf="git-task->default" />

                                        <dependency org="org.eclipse.jgit" 
                                name="org.eclipse.jgit" 
                                rev="3.0.0.201306101825-r" conf="git-task->default" />

                                        <dependency org="com.jcraft" 
                                name="jsch" 
                                rev="0.1.50" conf="git-task->default" />

                                        <dependency org="com.rimerosolutions.ant" 
                                name="ant-git-tasks"
                                rev="1.3.2" 
                                conf="git-task->default" />
                                </dependencies>
                        </ivy-module>
                </echoxml>
        </target>
        
        <target name="clean-repos">
                <delete dir="nlp" />
                <delete dir="cmrdca" />
        </target>

        <!-- Exemplo:
            ant gen20newsgroupsConfusionImages -Dr.clusterTable.inputfile=clusterrun-20newsgroups-glove-SSenseContextMatrix-k20-RTable.txt -Dr.confusionImage.outputfile=clusterrun-20newsgroups-glove-SSenseContextMatrix-k20.pdf
        -->
        <target name="gen20newsgroupsConfusionImages" depends="shell_windows_setup, shell_unix_setup">
            <property name="r.binary" value="R" />
            <property name="r.script" value="${basedir}/genConfusionMatImages20news.R" />
            
            <condition property="r.clusterTable.inputfile.set">
                <isset property="r.clusterTable.inputfile" />
            </condition>

            <condition property="r.confusionImage.outputfile.set">
                <isset property="r.confusionImage.outputfile" />
            </condition>
            
            <fail message="input file with cluster table is not set." unless="r.clusterTable.inputfile.set" />
            
            <fail message="output file to write confusion matrix image is not set." unless="r.confusionImage.outputfile.set" />
            
            <exec dir="${basedir}" executable="${shell.executable}">
                <env key="RTABLE_FILE" value="${r.clusterTable.inputfile}"/>
                <env key="RPDFOUT_FILE" value="${r.confusionImage.outputfile}"/>
                <arg line="${shell.args} '${r.binary} CMD BATCH --no-save --no-restore ${r.script}'" />
            </exec>
        </target>
        

        <!-- Exemplo:
            ant processedOutputClustering2Table -DinputFile.processedOutput=clusterrun-20newsgroups-glove-SSenseContextMatrix-k20.txt -DoutputFile.clusterTable=clusterrun-20newsgroups-glove-SSenseContextMatrix-k20-RTable.txt
        -->
        <target name="processedOutputClustering2Table" depends="gen-ivy-settings">
            <condition property="inputFile.processedOutput.set">
                <isset property="inputFile.processedOutput" />
            </condition>
            <condition property="outputFile.clusterTable.set">
                <isset property="outputFile.clusterTable" />
            </condition>
            <fail message="input file with clustering results not set." unless="inputFile.processedOutput.set" />
            <fail message="output file to write cluster table not set." unless="outputFile.clusterTable.set" />
            <ivy:settings file="${ivy.conf.dir}/ivysettings.xml"/>
            <ivy:resolve resolveId="wrdca-jars" keep="true">
                <dependency org="br.ufpe.cin.cluster" name="srmq-wrdca" rev="0.0.1-SNAPSHOT" transitive="false" />
            </ivy:resolve>
            <java classname="wrdca.util.ProcessedOutputToTableWriter" fork="true" output="${outputFile.clusterTable}" error="${basedir}/stderr.log">
                <arg value="${inputFile.processedOutput}" />
                <classpath>
                    <ivy:resources resolveId="wrdca-jars" />
                    <pathelement path="${java.class.path}"/>
                </classpath>
            </java>
        </target>
        
        
        <!-- Exemplo:
            ant dissimMtxElements2SimpleFormat -DinputFile.dissimMatrix=20_newsgroups-noheaders-Glove-SSenseContext-Dissims.mtx.bak -DinputFile.elementList=20_newsgroups-noheaders-Glove-SSenseContextMatrix-Elements.txt -DoutputFile.simpleFormat=20_newsgroups-noheaders-Glove-SSenseContext-Dissims-SimpleFormat.txt 
        -->
        <target name="dissimMtxElements2SimpleFormat" depends="gen-ivy-settings">
            <condition property="inputFile.dissimMatrix.set">
                <isset property="inputFile.dissimMatrix" />
            </condition>
            
            <condition property="inputFile.elementList.set">
                <isset property="inputFile.elementList" />
            </condition>

            <condition property="outputFile.simpleFormat.set">
                <isset property="outputFile.simpleFormat" />
            </condition>
            
            <fail message="input file with dissim matrix is not set." unless="inputFile.dissimMatrix.set" />

            <fail message="input file with element list is not set." unless="inputFile.elementList.set" />

            <fail message="output file for simple format output is not set." unless="outputFile.simpleFormat.set" />
            
            <ivy:settings file="${ivy.conf.dir}/ivysettings.xml"/>
            <ivy:resolve resolveId="wrdca-jars" keep="true">
                <dependency org="br.ufpe.cin.cluster" name="srmq-wrdca" rev="0.0.1-SNAPSHOT" transitive="false" />
            </ivy:resolve>
            <java classname="wrdca.util.MMObjectListToSimpleFormat" fork="true" maxmemory="2048m">
                <arg value="${inputFile.dissimMatrix}" />
                <arg value="${inputFile.elementList}" />
                <arg value="${outputFile.simpleFormat}" />
                <arg value="usefloats" />
                <classpath>
                    <ivy:resources resolveId="wrdca-jars" />
                    <pathelement path="${java.class.path}"/>
                </classpath>
            </java>
        </target>
        
        <target name="localCMRDCA" unless="mode.global.set" depends="shell_windows_setup, shell_unix_setup, buildCMRDCA">
            <exec dir="${basedir}" executable="${shell.executable}">
                <arg line="${shell.args} '${basedir}/cmrdca/CMRDCA-SFProcessor/src/CMRDCA-SFProcessor ${config.file}'" />
            </exec>
        </target>
        
        <target name="globalCMRDCA" if="mode.global.set" depends="shell_windows_setup, shell_unix_setup, buildCMRDCA">
            <exec dir="${basedir}" executable="${shell.executable}">
                <arg line="${shell.args} '${basedir}/cmrdca/CMRDCA-SFProcessor/src/CMRDCA-SFProcessor ${config.file} global'" />
            </exec>
        </target>
        
        <!-- Exemplo
            ant runCMRDCA-multiK -Dn.clusters.from=2 -Dn.clusters.to=25 -Dn.init=20 -Dmax.iter=20 -Dinput.files=/home/srmq/Documents/Research/textmining/devel/data/20_newsgroups-noheaders-Glove-SSenseContextMatrix-Dissims-Norm0-1.txt -Doutput.files.startname=clusterrun-20newsgroups-glove-SSenseContextMatrix -Dn.objects=19997 -Dn.aprioriclass=20 -Doutput.file.indicestable=clusterrun-20newsgroups-glove-SSenseContextMatrix-indicestable.csv 
        -->
        <target name="runCMRDCA-multiK" depends="buildCMRDCA">
            <condition property="n.clusters.from.set">
                <isset property="n.clusters.from" />
            </condition>
            <condition property="n.clusters.to.set">
                <isset property="n.clusters.to" />
            </condition>
            <condition property="output.files.startname.set">
                <isset property="output.files.startname" />
            </condition>
            <condition property="output.file.indicestable.set">
                <isset property="output.file.indicestable" />
            </condition>
            <property name="n.clusters.inc" value="1" />
            <fail message="initial number of clusters is not set." unless="n.clusters.from.set" />
            <fail message="final number of clusters is not set." unless="n.clusters.to.set" />
            <fail message="start name for output files is not set." unless="output.files.startname.set" />
            
            <script language="javascript" manager="javax"><![CDATA[
                myProject = self.getProject();
                initK = parseInt(myProject.getProperty("n.clusters.from"));
                endK = parseInt(myProject.getProperty("n.clusters.to"));
                inc = parseInt(myProject.getProperty("n.clusters.inc"));
                if (initK < 2) throw new Error("n.clusters.from should be at least 2, was: " + initK);
                if (endK < initK) throw new Error("n.clusters.to should be equal or greater than n.clusters.from, was: " + endK);
                if (inc < 1) throw new Error("n.clusters.inc should be at least 1, was: " + inc);
                outputFileNames = "";
                for (k = initK; k <= endK; k += inc) {
                    currOutputFile = myProject.getProperty("output.files.startname") + "-k" + k + ".txt";
                    myProject.setProperty("output.file",currOutputFile);
                    myProject.setProperty("n.clusters", k.toString());
                    myProject.executeTarget("runCMRDCA");
                    if (outputFileNames.length > 0) {
                        outputFileNames += "|";
                    }
                    outputFileNames += currOutputFile;
                }
                myProject.setProperty("output.files.list", outputFileNames);
            ]]></script>
        <!-- FIXME continue using property output.files.list with java pattern -->
            
        </target>
        
        <!-- Exemplo
            ant runCMRDCA -Dn.clusters=20 -Dn.init=20 -Dmax.iter=20 -Dinput.files=/home/srmq/Documents/Research/textmining/devel/data/20_newsgroups-noheaders-Glove-SSenseContextMatrix-Dissims-Norm0-1.txt -Doutput.file=clusterrun.txt -Dn.objects=19997 -Dn.aprioriclass=20
        -->
        <target name="runCMRDCA" depends="buildCMRDCA">
            <condition property="n.clusters.set">
                <isset property="n.clusters" />
            </condition>            
            <condition property="n.init.set">
                <isset property="n.init" />
            </condition>            
            <condition property="max.iter.set">
                <isset property="max.iter" />
            </condition>
            <condition property="input.files.set">
                <isset property="input.files" />
            </condition>
            <condition property="output.file.set">
                <isset property="output.file" />
            </condition>
            <condition property="n.objects.set">
                <isset property="n.objects" />
            </condition>
            <condition property="n.aprioriclass.set">
                <isset property="n.aprioriclass" />
            </condition>
            <condition property="mode.global.set">
                <isset property="mode.global" />
            </condition>
            <condition property="mode.local.set">
                <not><isset property="mode.global" /></not>
            </condition>
            
            <property name="config.file" value="${output.file}.config" />
            <property name="n.medoids" value="2" />
            <property name="single.precision" value="1" />
            
            <fail message="number of clusters desired is not set." unless="n.clusters.set" />
            <fail message="number of initializations to use is not set." unless="n.init.set" />
            <fail message="max number of iterations is not set." unless="max.iter.set" />
            <fail message="input files are not set." unless="input.files.set" />
            <fail message="output files are not set." unless="output.file.set" />
            <fail message="number of objects to cluster is not set." unless="n.objects.set" />
            <fail message="number of existing aprioriclass (for supervised indices calculation) is not set." unless="n.aprioriclass.set" />
            
            <loadresource property="input.files.filtered">
                <propertyresource name="input.files" />
                <filterchain>
                    <tokenfilter>
                        <filetokenizer />
                        <replacestring from="," to="${line.separator}"/>
                    </tokenfilter>
                </filterchain>
            </loadresource>
            <echo file="${config.file}">(numCluster)
${n.clusters}

(numInicializacao)
${n.init}

(numIteracoes)
${max.iter}

(input)
${input.files.filtered}

(output)
${output.file}

(entradaSimples)
1

(numIndividuos)
${n.objects}

(numPrioriClusters)
${n.aprioriclass}

(numMedoids)
${n.medoids}

(useDissimFloats)
${single.precision}
</echo>
        <antcall target="localCMRDCA">
            <param name="config.file" value="${config.file}" />
        </antcall>
        <antcall target="globalCMRDCA">
            <param name="config.file" value="${config.file}" />
        </antcall>
        </target>
        

        <target name="clone-repos" depends="gen-ivy-settings" unless="skip.clone.repos">
                <ivy:settings file="${ivy.conf.dir}/ivysettings.xml"/>
                <ivy:resolve file="${ivy.conf.dir}/ivy-git-tasks.xml" conf="git-task" />
                <ivy:cachepath pathid="git.task.classpath" conf="git-task" />

                <taskdef uri="antlib:com.rimerosolutions.ant.git" resource="com/rimerosolutions/ant/git/jgit-ant-lib.xml">
                        <classpath>
                                <path refid="git.task.classpath"/>
                        </classpath>
                </taskdef>

                <git:git directory="nlp" verbose="true">
                        <git:clone uri="https://github.com/srmq/nlp.git"/>
                </git:git>
                <git:git directory="cmrdca" verbose="true">
                        <git:clone uri="https://github.com/srmq/cmrdca.git"/>
                </git:git>
        </target>
        
        <target name="srmq-nlp-package" depends="clone-repos" unless="skip.nlp.package">
                <antcall target="run-mvn-goals">
                        <param name="exec_dir" value="${basedir}/nlp/srmq-nlp" />
                        <param name="p_goals" value="package"/>
                </antcall>
        </target>
        
        <target name="run-mvn-goals" depends="install-maven,shell_windows_setup, shell_unix_setup">
                <exec dir="${exec_dir}" executable="${shell.executable}">
                    <env key="MAVEN_OPTS" value="-Xmx1g"/>
                        <arg line="${shell.args} '${tools.home}/apache-maven-${maven3.install.version}/bin/mvn ${p_goals}'" />
                </exec>
        </target>
        
        <target name="install-maven" depends="download-maven">
                <mkdir dir="${tools.home}" />
                <unzip src="${maven3.zip.file}" dest="${tools.home}" />
                <chmod file="${tools.home}/apache-maven-${maven3.install.version}/bin/mvn" perm="ugo+rx" />
        </target>
        
        <target name="download-maven" unless="skip.download">
                <mkdir dir="${downloads.dir}"/>
                <!-- download Maven from web site so that it can be used even without any special installation -->
                <echo message="downloading Maven..."/>
                <get src="https://archive.apache.org/dist/maven/maven-3/${maven3.install.version}/binaries/apache-maven-${maven3.install.version}-bin.zip"
            dest="${maven3.zip.file}" usetimestamp="true"/>
        </target>
        
        <target name="buildCMRDCA" depends="shell_windows_setup, shell_unix_setup, clone-repos" unless="skip.build.cmrdca">
            <property name="make.binary" value="make" />
            <exec dir="${basedir}/cmrdca/CMRDCA/src" executable="${shell.executable}">
                <arg line="${shell.args} '${make.binary}'" />
            </exec>
            <exec dir="${basedir}/cmrdca/CMRDCA-SFProcessor/src" executable="${shell.executable}">
                <arg line="${shell.args} '${make.binary}'" />
            </exec>
        </target>
        
        <!--
            Exemplo:
                ant globalContext2DissimMatrix -Dr.context.inputfile=./20_newsgroups-noheaders-Glove-SSenseContextMatrix.txt -Dr.dissims.outputfile=./20_newsgroups-noheaders-Glove-SSenseContext-Dissims.mtx
        -->
        <target name="globalContext2DissimMatrix" depends="shell_windows_setup, shell_unix_setup">
            <property name="r.binary" value="R" />
            <property name="r.script" value="${basedir}/globalcontext2dissims.R" />
            
            <condition property="r.context.inputfile.set">
                <isset property="r.context.inputfile" />
            </condition>

            <condition property="r.dissims.outputfile.set">
                <isset property="r.dissims.outputfile" />
            </condition>
            
            <fail message="input file with context matrix is not set." unless="r.context.inputfile.set" />
            
            <fail message="output file to write output dissim matrix is not set." unless="r.dissims.outputfile.set" />
            
            <exec dir="${basedir}" executable="${shell.executable}">
                <env key="R_CONTEXT_INPUT" value="${r.context.inputfile}"/>
                <env key="R_DISSIMS_OUTPUT" value="${r.dissims.outputfile}"/>
                <arg line="${shell.args} '${r.binary} CMD BATCH --no-save --no-restore ${r.script}'" />
            </exec>
        </target>
        
        <!--
            Exemplo: 
                ant run-ssenses2globalcontext -Dssensescontext.docs.basepath=/home/srmq/git/wordvec-ssensecontext-runner/output/20newsgroups -Dssensescontext.matrix.outfile=./20_newsgroups-noheaders-Glove-SSenseContextMatrix.txt -Dssensescontext.elements.outfile=./20_newsgroups-noheaders-Glove-SSenseContextMatrix-Elements.txt -Dssensescontext.embedsize=300
        
        -->
        <target name="run-ssenses2globalcontext" depends="srmq-nlp-package">
            <condition property="ssensescontext.docs.basepath.set">
                <isset property="ssensescontext.docs.basepath" />
            </condition>

            <condition property="ssensescontext.matrix.outfile.set">
                <isset property="ssensescontext.matrix.outfile" />
            </condition>

            <condition property="ssensescontext.elements.outfile.set">
                <isset property="ssensescontext.elements.outfile" />
            </condition>
            
            <condition property="ssensescontext.embedsize.set">
                <isset property="ssensescontext.embedsize" />
            </condition>

            <fail message="basepath for documents is not set." unless="ssensescontext.docs.basepath.set" />
            
            <fail message="output file for global context matrix is not set." unless="ssensescontext.matrix.outfile.set" />

            <fail message="output file for element list is not set." unless="ssensescontext.elements.outfile.set" />

            <fail message="embed size is not set" unless="ssensescontext.embedsize.set" />
            
            <java classname="br.ufpe.cin.srmqnlp.GlobalContextMatrix">
                <arg value="${ssensescontext.docs.basepath}" />
                <arg value="${ssensescontext.matrix.outfile}" />
                <arg value="${ssensescontext.elements.outfile}" />
                <arg value="${ssensescontext.embedsize}" />
                
                <classpath>
			<pathelement location="${basedir}/nlp/srmq-nlp/target/srmq-nlp-0.0.1-SNAPSHOT-jar-with-dependencies.jar" />
			<pathelement path="${java.class.path}" />
                </classpath>
            </java>
        </target>
</project>
